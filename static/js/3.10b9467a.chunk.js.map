{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","views/contacts/contacts-style.module.css","Components/form/form-styles.module.css","Components/contacts-list/contactsList-styles.module.css","Components/filter/filter-styles.module.css","redux/contacts-operations.js","redux/contacts-selectors.js","Components/form/Form.js","Components/contacts-list/ContactList.js","Components/filter/Filter.js","views/contacts/ContactsView.js"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","module","exports","axios","defaults","baseURL","getLoading","state","contacts","loading","getFilter","filter","getAllContacts","items","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","contact","name","includes","connect","dispatch","onSubmit","data","number","addContactRequest","post","then","addContactSuccess","catch","error","addContactError","addContact","useState","setName","setNumber","event","preventDefault","find","alert","className","s","form","label","input","type","pattern","title","required","onChange","target","btn","onDeleteContact","id","contactId","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","list","map","item","p","span","onClick","filterValue","toFilter","changeFilter","div","ContactsView","this","props","fetchContacts","contactsBox","isLoadingcontacts","loaderBox","color","secondaryColor","height","width","formsBox","Component","featchContactRequest","get","featchContactSuccess","featchContactError"],"mappings":"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","file":"static/js/3.10b9467a.chunk.js","sourcesContent":["import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactsBox\":\"contacts-style_contactsBox__38bYp\",\"loaderBox\":\"contacts-style_loaderBox__2sF6s\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"form-styles_label__3zRiN\",\"input\":\"form-styles_input__uxkmS\",\"form\":\"form-styles_form__2NRZq\",\"btn\":\"form-styles_btn__Q8h2l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"contactsList-styles_list__3HZYZ\",\"item\":\"contactsList-styles_item__2wBH8\",\"span\":\"contactsList-styles_span__qf6EO\",\"btn\":\"contactsList-styles_btn__2bsHb\",\"p\":\"contactsList-styles_p__2LSDM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"div\":\"filter-styles_div__3Z98X\",\"input\":\"filter-styles_input__23kcj\",\"label\":\"filter-styles_label__kF91T\"};","import axios from 'axios';\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  featchContactRequest,\r\n  featchContactSuccess,\r\n  featchContactError,\r\n} from './contacts-actions';\r\n\r\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\r\n\r\nconst token = {\r\n  set(token) {\r\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\r\n  },\r\n  unset() {\r\n    axios.defaults.headers.common.Authorization = '';\r\n  },\r\n};\r\n\r\nconst fetchContacts = () => dispatch => {\r\n  dispatch(featchContactRequest());\r\n\r\n  axios\r\n    .get('/contacts')\r\n    .then(({ data }) => dispatch(featchContactSuccess(data)))\r\n    .catch(error => dispatch(featchContactError(error)));\r\n};\r\n\r\nconst addContact = data => dispatch => {\r\n  const contact = {\r\n    name: data.name,\r\n    number: data.number,\r\n  };\r\n\r\n  dispatch(addContactRequest());\r\n\r\n  return axios\r\n    .post('/contacts', contact)\r\n    .then(({ data }) => dispatch(addContactSuccess(data)))\r\n    .catch(error => dispatch(addContactError(error)));\r\n};\r\n\r\n// const addContact =\r\n//   ({ name, number }) =>\r\n//   dispatch => {\r\n//     const contact = {\r\n//       name,\r\n//       number,\r\n//     };\r\n\r\n//     dispatch(addContactRequest());\r\n\r\n//     axios\r\n//       .post('/contacts', contact)\r\n//       .then(({ data }) => dispatch(addContactSuccess(data)))\r\n//       .catch(error => dispatch(addContactError(error)));\r\n//   };\r\n\r\nconst deleteContact = contactId => dispatch => {\r\n  dispatch(deleteContactRequest());\r\n\r\n  axios\r\n    .delete(`/contacts/${contactId}`)\r\n    .then(() => dispatch(deleteContactSuccess(contactId)))\r\n    .catch(error => dispatch(deleteContactError(error)));\r\n};\r\n\r\nexport { addContact, deleteContact, fetchContacts };\r\n","import { createSelector } from '@reduxjs/toolkit';\r\nconst getLoading = (state) => state.contacts.loading;\r\n\r\nconst getFilter = (state) => {\r\n  return state.contacts.filter;\r\n};\r\n\r\nconst getAllContacts = (state) => {\r\n  return state.contacts.items;\r\n};\r\n\r\nconst getVisibleContacts = createSelector(\r\n  [getAllContacts, getFilter],\r\n  (contacts, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n    return contacts.filter((contact) =>\r\n      contact.name.toLowerCase().includes(normalizedFilter)\r\n    );\r\n  }\r\n);\r\n\r\nexport { getLoading, getFilter, getAllContacts, getVisibleContacts };\r\n","import { useState } from 'react';\r\n// import shortid from 'shortid';\r\nimport PropTypes from 'prop-types';\r\nimport s from './form-styles.module.css';\r\nimport { connect } from 'react-redux';\r\nimport { addContact } from '../../redux/contacts-operations';\r\nimport { getAllContacts } from '../../redux/contacts-selectors';\r\n\r\nfunction Form({ contacts, onSubmit }) {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const changeName = event => {\r\n    setName(event.target.value);\r\n  };\r\n\r\n  const changeNumber = event => {\r\n    setNumber(event.target.value);\r\n  };\r\n\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n    const data = { name: name, number: number };\r\n    if (contacts.find(contact => contact.name === name)) {\r\n      return alert(`This person ${name} is already in contacts`);\r\n    }\r\n    onSubmit(data);\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className={s.form}>\r\n      <label className={s.label}>Name</label>\r\n      <input\r\n        className={s.input}\r\n        type=\"text\"\r\n        name=\"name\"\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n        value={name}\r\n        onChange={changeName}\r\n      />\r\n      <label className={s.label}>Number</label>\r\n      <input\r\n        className={s.input}\r\n        type=\"tel\"\r\n        name=\"number\"\r\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n        required\r\n        value={number}\r\n        onChange={changeNumber}\r\n      />\r\n      <button type=\"submit\" className={s.btn}>\r\n        Add to contacts\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nForm.propTypes = {\r\n  onSubmit: PropTypes.func,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: getAllContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: data => {\r\n    return dispatch(addContact(data));\r\n  },\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\r\n\r\n// const mapDispatchToProps = dispatch => {\r\n//   return {\r\n//     toAddContact: data => dispatch(addContact(data)),\r\n//   };\r\n// };\r\n\r\n// export default connect(null, mapDispatchToProps)(Form);\r\n","import PropTypes from 'prop-types';\r\nimport s from './contactsList-styles.module.css';\r\nimport { connect } from 'react-redux';\r\nimport { deleteContact } from '../../redux/contacts-operations';\r\nimport { getVisibleContacts } from '../../redux/contacts-selectors';\r\n\r\nfunction ContactList({ contacts, onDeleteContact }) {\r\n  return (\r\n    <ul className={s.list}>\r\n      {contacts.map(contact => {\r\n        const { name, number, id } = contact;\r\n        return (\r\n          <li key={id} className={s.item}>\r\n            <p className={s.p}>\r\n              {name} <span className={s.span}>{number}</span>\r\n            </p>\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => {\r\n                onDeleteContact(id);\r\n              }}\r\n              className={s.btn}\r\n            >\r\n              Delete\r\n            </button>\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n}\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(PropTypes.object),\r\n  onDelete: PropTypes.func,\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    contacts: getVisibleContacts(state),\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onDeleteContact: id => dispatch(deleteContact(id)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import PropTypes from 'prop-types';\r\nimport s from './filter-styles.module.css';\r\nimport { connect } from 'react-redux';\r\nimport { getFilter } from '../../redux/contacts-selectors';\r\nimport { changeFilter } from '../../redux/contacts-actions';\r\n\r\nconst Filter = ({ filterValue, toFilter }) => {\r\n  return (\r\n    <div className={s.div}>\r\n      <label className={s.label}>Find contacts by name</label>\r\n      <input\r\n        onChange={toFilter}\r\n        value={filterValue}\r\n        className={s.input}\r\n      ></input>\r\n    </div>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    filterValue: getFilter(state),\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    toFilter: event => dispatch(changeFilter(event.target.value)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import s from './contacts-style.module.css';\r\nimport { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Form from '../../Components/form/Form';\r\nimport ContactsList from '../../Components/contacts-list/ContactList';\r\nimport Filter from '../../Components/filter/Filter';\r\nimport Loader from 'react-loader-spinner';\r\nimport { fetchContacts } from '../../redux/contacts-operations';\r\nimport { getLoading } from '../../redux/contacts-selectors';\r\n\r\nclass ContactsView extends Component {\r\n  state = {};\r\n\r\n  componentDidMount() {\r\n    this.props.fetchContacts();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className={s.contactsBox}>\r\n          {this.props.isLoadingcontacts && (\r\n            <div className={s.loaderBox}>\r\n              <Loader\r\n                type=\"MutatingDots\"\r\n                color=\"#0b6470\"\r\n                secondaryColor=\"rgb(72, 163, 185)\"\r\n                height={100}\r\n                width={100}\r\n              />\r\n            </div>\r\n          )}\r\n          <div className={s.formsBox}>\r\n            <Form />\r\n\r\n            <Filter />\r\n          </div>\r\n\r\n          <ContactsList />\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isLoadingcontacts: getLoading(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  fetchContacts: () => dispatch(fetchContacts()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsView);\r\n"],"sourceRoot":""}