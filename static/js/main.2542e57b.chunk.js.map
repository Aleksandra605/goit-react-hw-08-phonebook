{"version":3,"sources":["redux/auth/auth-selectors.js","Components/Navigation.js","Components/UserMenu.js","Components/AuthNav.js","Components/AppBar.js","Components/PrivateRoute.js","Components/PublicRoute.js","App.js","redux/reducers.js","redux/auth/auth-reducer.js","redux/store.js","reportWebVitals.js","index.js","redux/contacts-actions.js","Components/navigation-style.module.css","redux/auth/auth-operations.js","redux/auth/auth-actions.js"],"names":["getIsAuthenticated","state","auth","isAuthenticated","getUsername","user","name","connect","className","s","nav","home","exact","to","phonebook","mapDispatchToProps","onLogout","logOut","type","onClick","btn","AuthNav","authorization","registration","login","appBar","Component","component","redirectTo","routeProps","render","props","restricted","Register","lazy","Login","ContactsView","App","this","onGetCurretnUser","AppBar","fallback","loaderBox","color","secondaryColor","height","width","path","getCurrentUser","items","createReducer","featchContactSuccess","action","payload","addContactSuccess","deleteContactSuccess","filter","contact","id","loading","featchContactRequest","featchContactError","addContactRequest","addContactError","deleteContactRequest","deleteContactError","changeFilter","error","contactsReducer","combineReducers","initialUserState","email","authActions","_","token","setError","authReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","authPersistConfig","key","storage","whitelist","store","configureStore","reducer","persistReducer","contacts","devTools","process","persistor","persistStore","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById","createAction","module","exports","axios","defaults","baseURL","headers","common","Authorization","register","credentials","dispatch","a","registerRequest","post","response","data","registerSuccess","registerError","message","logIn","loginRequest","loginSuccess","loginError","logoutRequest","logoutSuccess","logoutError","getState","persistedToken","getCurrentUserRequest","get","getCurrentUserSuccess","getCurrentUserError"],"mappings":"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","file":"static/js/main.2542e57b.chunk.js","sourcesContent":["const getIsAuthenticated = state => state.auth.isAuthenticated;\r\n\r\nconst getUsername = state => state.auth.user.name;\r\n\r\nexport { getIsAuthenticated, getUsername };\r\n","import React from 'react';\r\nimport s from './navigation-style.module.css';\r\nimport { connect } from 'react-redux';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { getIsAuthenticated } from '../redux/auth/auth-selectors';\r\n\r\nconst Navigation = ({ isAuthenticated }) => (\r\n  <nav className={s.nav}>\r\n    <NavLink className={s.home} exact to=\"/\">\r\n      HOME\r\n    </NavLink>\r\n\r\n    {isAuthenticated && (\r\n      <NavLink exact to=\"/contacts\" className={s.phonebook}>\r\n        Phonebook\r\n      </NavLink>\r\n    )}\r\n  </nav>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: getIsAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(Navigation);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getUsername } from '../redux/auth/auth-selectors';\r\nimport { logOut } from '../redux/auth/auth-operations';\r\nimport s from './navigation-style.module.css';\r\n\r\nconst UserMenu = ({ name, onLogout }) => (\r\n  <div>\r\n    <span>Welcome, {name}</span>\r\n    <button type=\"button\" onClick={onLogout} className={s.btn}>\r\n      LogOut\r\n    </button>\r\n  </div>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  name: getUsername(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  onLogout: logOut,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserMenu);\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './navigation-style.module.css';\r\n\r\nconst AuthNav = () => (\r\n  <>\r\n    <div className={s.authorization}>\r\n      <NavLink to=\"/register\" exact className={s.registration}>\r\n        Registration\r\n      </NavLink>\r\n\r\n      <NavLink to=\"/login\" exact className={s.login}>\r\n        Login\r\n      </NavLink>\r\n    </div>\r\n  </>\r\n);\r\n\r\nexport default AuthNav;\r\n","import React from 'react';\r\nimport s from './navigation-style.module.css';\r\nimport { connect } from 'react-redux';\r\nimport Navigation from './Navigation';\r\nimport UserMenu from './UserMenu';\r\nimport AuthNav from './AuthNav';\r\nimport { getIsAuthenticated } from '../redux/auth/auth-selectors';\r\n\r\nconst MenuBar = ({ isAuthenticated }) => (\r\n  <header className={s.appBar}>\r\n    <Navigation />\r\n    {isAuthenticated ? <UserMenu /> : <AuthNav />}\r\n  </header>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: getIsAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(MenuBar);\r\n","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { getIsAuthenticated } from '../redux/auth/auth-selectors';\r\n\r\nconst PrivateRoute = ({\r\n  component: Component,\r\n  isAuthenticated,\r\n  redirectTo,\r\n  ...routeProps\r\n}) => (\r\n  <Route\r\n    {...routeProps}\r\n    render={props =>\r\n      isAuthenticated ? <Component {...props} /> : <Redirect to={redirectTo} />\r\n    }\r\n  />\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: getIsAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(PrivateRoute);\r\n","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { getIsAuthenticated } from '../redux/auth/auth-selectors';\r\n\r\nconst PublicRoute = ({\r\n  component: Component,\r\n  isAuthenticated,\r\n  redirectTo,\r\n  ...routeProps\r\n}) => (\r\n  <Route\r\n    {...routeProps}\r\n    render={props =>\r\n      isAuthenticated && routeProps.restricted ? (\r\n        <Redirect to={redirectTo} />\r\n      ) : (\r\n        <Component {...props} />\r\n      )\r\n    }\r\n  />\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: getIsAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(PublicRoute);\r\n","import React, { Component, Suspense, lazy } from 'react';\nimport PropTypes from 'prop-types';\nimport { Switch } from 'react-router-dom';\nimport AppBar from './Components/AppBar';\nimport { getCurrentUser } from './redux/auth/auth-operations';\nimport { connect } from 'react-redux';\nimport PrivateRoute from './Components/PrivateRoute';\nimport PublicRoute from './Components/PublicRoute';\nimport s from './App.css';\nimport Loader from 'react-loader-spinner';\n\nconst Register = lazy(() => import('./views/register/RegisterView'));\nconst Login = lazy(() => import('./views/login/LoginView'));\nconst ContactsView = lazy(() => import('./views/contacts/ContactsView'));\n\nclass App extends Component {\n  state = {};\n\n  componentDidMount() {\n    this.props.onGetCurretnUser();\n  }\n\n  render() {\n    return (\n      <>\n        <AppBar />\n        <Suspense\n          fallback={\n            <div className={s.loaderBox}>\n              <Loader\n                type=\"MutatingDots\"\n                color=\"#0b6470\"\n                secondaryColor=\"rgb(72, 163, 185)\"\n                height={100}\n                width={100}\n              />\n            </div>\n          }\n        >\n          <Switch>\n            {/* <PublicRoute exact path=\"/\" component={HomeView} /> */}\n            <PublicRoute\n              path=\"/register\"\n              restricted\n              redirectTo=\"/contacts\"\n              component={Register}\n              exact\n            />\n            <PublicRoute\n              path=\"/login\"\n              restricted\n              redirectTo=\"/contacts\"\n              component={Login}\n              exact\n            />\n            <PrivateRoute\n              path=\"/contacts\"\n              redirectTo=\"/login\"\n              component={ContactsView}\n              exact\n            />\n          </Switch>\n        </Suspense>\n      </>\n    );\n  }\n}\n\nApp.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string,\n  number: PropTypes.string,\n};\n\nconst mapDispatchToProps = {\n  onGetCurretnUser: getCurrentUser,\n};\n\nexport default connect(null, mapDispatchToProps)(App);\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport { combineReducers } from 'redux';\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactError,\r\n  deleteContactSuccess,\r\n  changeFilter,\r\n  featchContactRequest,\r\n  featchContactSuccess,\r\n  featchContactError,\r\n} from './contacts-actions';\r\n\r\nconst items = createReducer([], {\r\n  [featchContactSuccess]: (state, action) => action.payload,\r\n  [addContactSuccess]: (state, action) => [...state, action.payload],\r\n  [deleteContactSuccess]: (state, action) =>\r\n    state.filter(contact => contact.id !== action.payload),\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [featchContactRequest]: () => true,\r\n  [featchContactSuccess]: () => false,\r\n  [featchContactError]: () => false,\r\n\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n\r\n  [deleteContactRequest]: () => true,\r\n  [deleteContactSuccess]: () => false,\r\n  [deleteContactError]: () => false,\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [changeFilter]: (state, action) => action.payload,\r\n});\r\n\r\nconst error = createReducer(null, {});\r\n\r\nconst contactsReducer = combineReducers({\r\n  items: items,\r\n  loading: loading,\r\n  filter: filter,\r\n  error: error,\r\n});\r\n\r\nexport default contactsReducer;\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport * as authActions from './auth-actions';\r\n\r\nconst initialUserState = { name: null, email: null };\r\n\r\nconst user = createReducer(initialUserState, {\r\n  [authActions.registerSuccess]: (_, { payload }) => payload.user,\r\n  [authActions.loginSuccess]: (_, { payload }) => payload.user,\r\n  [authActions.logoutSuccess]: () => initialUserState,\r\n  [authActions.getCurrentUserSuccess]: (_, { payload }) => payload,\r\n});\r\n\r\nconst token = createReducer(null, {\r\n  [authActions.registerSuccess]: (_, { payload }) => payload.token,\r\n  [authActions.loginSuccess]: (_, { payload }) => payload.token,\r\n  [authActions.logoutSuccess]: () => null,\r\n});\r\n\r\nconst setError = (_, { payload }) => payload;\r\n\r\nconst error = createReducer(null, {\r\n  [authActions.registerError]: setError,\r\n  [authActions.loginError]: setError,\r\n  [authActions.logoutError]: setError,\r\n  [authActions.getCurrentUserError]: setError,\r\n});\r\n\r\nconst isAuthenticated = createReducer(false, {\r\n  [authActions.registerSuccess]: () => true,\r\n  [authActions.loginSuccess]: () => true,\r\n  [authActions.getCurrentUserSuccess]: () => true,\r\n  [authActions.registerError]: () => false,\r\n  [authActions.logoutError]: () => false,\r\n  [authActions.getCurrentUserError]: () => false,\r\n  [authActions.logoutSuccess]: () => false,\r\n});\r\n\r\nconst authReducer = combineReducers({\r\n  user,\r\n  isAuthenticated,\r\n  token,\r\n  error,\r\n});\r\n\r\nexport default authReducer;\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\n// import logger from 'redux-logger';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport contactsReducer from './reducers';\r\nimport authReducer from './auth/auth-reducer';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  // logger\r\n];\r\n\r\nconst authPersistConfig = {\r\n  key: 'auth',\r\n  storage,\r\n  whitelist: ['token'],\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    auth: persistReducer(authPersistConfig, authReducer),\r\n    contacts: contactsReducer,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport { store, persistor };\r\n\r\n// import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\n// // import logger from 'redux-logger';\r\n// import {\r\n//   FLUSH,\r\n//   REHYDRATE,\r\n//   PAUSE,\r\n//   PERSIST,\r\n//   PURGE,\r\n//   REGISTER,\r\n// } from 'redux-persist';\r\n// import contactsReducer from './reducers';\r\n\r\n// const middleware = [\r\n//   ...getDefaultMiddleware({\r\n//     serializableCheck: {\r\n//       ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n//     },\r\n//   }),\r\n//   // logger,\r\n// ];\r\n\r\n// const store = configureStore({\r\n//   reducer: {\r\n//     contacts: contactsReducer,\r\n//   },\r\n//   middleware,\r\n//   devTools: process.env.NODE_ENV === 'development',\r\n// });\r\n\r\n// export default store;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport { store, persistor } from './redux/store';\nimport 'modern-normalize/modern-normalize.css';\n\nimport { PersistGate } from 'redux-persist/integration/react';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\nreportWebVitals();\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const featchContactRequest = createAction(\r\n  'contacts/featchContactRequest',\r\n);\r\nexport const featchContactSuccess = createAction(\r\n  'contacts/featchContactSuccess',\r\n);\r\nexport const featchContactError = createAction('contacts/featchContactError');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\nexport const deleteContactRequest = createAction(\r\n  'contacts/deleteContactRequest',\r\n);\r\nexport const deleteContactSuccess = createAction(\r\n  'contacts/deleteContactSuccess',\r\n);\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\nexport const changeFilter = createAction('contacts/changeFilter');\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appBar\":\"navigation-style_appBar__6fIsN\",\"nav\":\"navigation-style_nav__3HMFV\",\"phonebook\":\"navigation-style_phonebook__3s7Ly\",\"home\":\"navigation-style_home__3H6sJ\",\"authorization\":\"navigation-style_authorization__3aHZX\",\"registration\":\"navigation-style_registration__2Fcg6\",\"login\":\"navigation-style_login__1qUHy\",\"btn\":\"navigation-style_btn__1rHQ8\"};","import axios from 'axios';\r\nimport {\r\n  registerRequest,\r\n  registerSuccess,\r\n  registerError,\r\n  logoutRequest,\r\n  logoutSuccess,\r\n  logoutError,\r\n  loginRequest,\r\n  loginSuccess,\r\n  loginError,\r\n  getCurrentUserRequest,\r\n  getCurrentUserSuccess,\r\n  getCurrentUserError,\r\n} from './auth-actions';\r\n\r\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\r\n\r\nconst token = {\r\n  set(token) {\r\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\r\n  },\r\n  unset() {\r\n    axios.defaults.headers.common.Authorization = '';\r\n  },\r\n};\r\n\r\nconst register = credentials => async dispatch => {\r\n  dispatch(registerRequest());\r\n\r\n  try {\r\n    const response = await axios.post('/users/signup', credentials);\r\n    // console.log(\"YYY\", response);\r\n\r\n    token.set(response.data.token);\r\n\r\n    dispatch(registerSuccess(response.data));\r\n  } catch (error) {\r\n    dispatch(registerError(error.message));\r\n  }\r\n};\r\n\r\nconst logIn = credentials => async dispatch => {\r\n  //   dispatch(registerRequest());\r\n  dispatch(loginRequest());\r\n\r\n  try {\r\n    const response = await axios.post('/users/login', credentials);\r\n\r\n    token.set(response.data.token);\r\n\r\n    dispatch(loginSuccess(response.data));\r\n  } catch (error) {\r\n    dispatch(loginError(error.message));\r\n  }\r\n};\r\n\r\nconst logOut = () => async dispatch => {\r\n  dispatch(logoutRequest());\r\n\r\n  try {\r\n    await axios.post('/users/logout');\r\n\r\n    token.unset();\r\n    dispatch(logoutSuccess());\r\n  } catch (error) {\r\n    dispatch(logoutError(error.message));\r\n  }\r\n};\r\n\r\nconst getCurrentUser = () => async (dispatch, getState) => {\r\n  const {\r\n    auth: { token: persistedToken },\r\n  } = getState();\r\n\r\n  if (!persistedToken) {\r\n    return;\r\n  }\r\n\r\n  token.set(persistedToken);\r\n\r\n  dispatch(getCurrentUserRequest());\r\n\r\n  try {\r\n    const response = await axios.get('/users/current');\r\n\r\n    dispatch(getCurrentUserSuccess(response.data));\r\n  } catch (error) {\r\n    dispatch(getCurrentUserError(error.message));\r\n  }\r\n};\r\n\r\nexport { register, logOut, logIn, getCurrentUser };\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst registerRequest = createAction('auth/registerRequest');\r\nconst registerSuccess = createAction('auth/registerSuccess');\r\nconst registerError = createAction('auth/registerError');\r\n\r\nconst loginRequest = createAction('auth/loginRequest');\r\nconst loginSuccess = createAction('auth/loginSuccess');\r\nconst loginError = createAction('auth/loginError');\r\n\r\nconst logoutRequest = createAction('auth/logoutRequest');\r\nconst logoutSuccess = createAction('auth/logoutSuccess');\r\nconst logoutError = createAction('auth/logoutError');\r\n\r\nconst getCurrentUserRequest = createAction('auth/getCurrentUserRequest');\r\nconst getCurrentUserSuccess = createAction('auth/getCurrentUserSuccess');\r\nconst getCurrentUserError = createAction('auth/getCurrentUserError');\r\n\r\nexport {\r\n  registerRequest,\r\n  registerSuccess,\r\n  registerError,\r\n  logoutRequest,\r\n  logoutSuccess,\r\n  logoutError,\r\n  loginRequest,\r\n  loginSuccess,\r\n  loginError,\r\n  getCurrentUserRequest,\r\n  getCurrentUserSuccess,\r\n  getCurrentUserError,\r\n};\r\n"],"sourceRoot":""}