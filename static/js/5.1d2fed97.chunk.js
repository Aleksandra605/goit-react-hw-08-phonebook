(this["webpackJsonpgoit-react-hw-08-phonebook"]=this["webpackJsonpgoit-react-hw-08-phonebook"]||[]).push([[5],{105:function(e,t,a){"use strict";a.d(t,"a",(function(){return r}));var n=a(35);function r(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"!==typeof Symbol&&Symbol.iterator in Object(e)){var a=[],n=!0,r=!1,o=void 0;try{for(var i,s=e[Symbol.iterator]();!(n=(i=s.next()).done)&&(a.push(i.value),!t||a.length!==t);n=!0);}catch(u){r=!0,o=u}finally{try{n||null==s.return||s.return()}finally{if(r)throw o}}return a}}(e,t)||Object(n.a)(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}},106:function(e,t,a){e.exports={form:"auth-style_form__ClNab",btn:"auth-style_btn__1pGah",input:"auth-style_input__1flCJ"}},111:function(e,t,a){"use strict";a.r(t);var n=a(105),r=a(0),o=a(9),i=a(25),s=a(106),u=a.n(s),c=a(1);var l={onRegister:i.d};t.default=Object(o.b)(null,l)((function(e){var t=e.onRegister,a=Object(r.useState)(""),o=Object(n.a)(a,2),i=o[0],s=o[1],l=Object(r.useState)(""),b=Object(n.a)(l,2),m=b[0],p=b[1],d=Object(r.useState)(""),h=Object(n.a)(d,2),f=h[0],j=h[1],y=function(e){var t=e.target,a=t.name,n=t.value;switch(a){case"name":return s(n);case"email":return p(n);case"password":return j(n);default:return}};return Object(c.jsxs)("form",{onSubmit:function(e){e.preventDefault(),t({name:i,email:m,password:f}),s(""),p(""),j("")},className:u.a.form,children:[Object(c.jsx)("label",{children:"Name"}),Object(c.jsx)("input",{type:"text",name:"name",pattern:"^[a-zA-Z\u0430-\u044f\u0410-\u042f]+(([' -][a-zA-Z\u0430-\u044f\u0410-\u042f ])?[a-zA-Z\u0430-\u044f\u0410-\u042f]*)*$",title:"\u0418\u043c\u044f \u043c\u043e\u0436\u0435\u0442 \u0441\u043e\u0441\u0442\u043e\u044f\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0438\u0437 \u0431\u0443\u043a\u0432, \u0430\u043f\u043e\u0441\u0442\u0440\u043e\u0444\u0430, \u0442\u0438\u0440\u0435 \u0438 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u0432. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan \u0438 \u0442. \u043f.",required:!0,value:i,onChange:y,className:u.a.input}),Object(c.jsx)("label",{children:"E-mail"}),Object(c.jsx)("input",{type:"email",name:"email",pattern:".+@globex\\.com",required:!0,value:m,onChange:y,className:u.a.input}),Object(c.jsx)("label",{children:"Password"}),Object(c.jsx)("input",{type:"password",name:"password",required:!0,value:f,onChange:y,className:u.a.input}),Object(c.jsx)("button",{type:"submit",className:u.a.btn,children:"Register"})]})}))}}]);
//# sourceMappingURL=5.1d2fed97.chunk.js.map