{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","views/auth-style.module.css","views/register/RegisterView.js"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","module","exports","mapDispatchToProps","onRegister","register","connect","useState","name","setName","email","setEmail","password","setPassword","handleChange","target","onSubmit","event","preventDefault","className","s","form","type","pattern","title","required","onChange","input","btn"],"mappings":"8LAIe,SAASA,EAAeC,EAAKC,GAC1C,OCLa,SAAyBD,GACtC,GAAIE,MAAMC,QAAQH,GAAM,OAAOA,EDIxB,CAAeA,IELT,SAA+BA,EAAKC,GACjD,GAAsB,qBAAXG,QAA4BA,OAAOC,YAAYC,OAAON,GAAjE,CACA,IAAIO,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKC,EAET,IACE,IAAK,IAAiCC,EAA7BC,EAAKb,EAAII,OAAOC,cAAmBG,GAAMI,EAAKC,EAAGC,QAAQC,QAChER,EAAKS,KAAKJ,EAAGK,QAEThB,GAAKM,EAAKW,SAAWjB,GAH8CO,GAAK,IAK9E,MAAOW,GACPV,GAAK,EACLC,EAAKS,EACL,QACA,IACOX,GAAsB,MAAhBK,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIJ,EAAI,MAAMC,GAIlB,OAAOH,GFnBuB,CAAqBP,EAAKC,IAAM,OAAAmB,EAAA,GAA2BpB,EAAKC,IGLjF,WACb,MAAM,IAAIoB,UAAU,6IHIgF,K,oBIJtGC,EAAOC,QAAU,CAAC,KAAO,yBAAyB,IAAM,wBAAwB,MAAQ,4B,oGC0ExF,IAAMC,EAAqB,CACzBC,WAAYC,KAGCC,sBAAQ,KAAMH,EAAdG,EA1Ef,YAAuC,IAAfF,EAAc,EAAdA,WACtB,EAAwBG,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAgCJ,mBAAS,IAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KAEMC,EAAe,SAAC,GAAiC,IAAD,IAA9BC,OAAUP,EAAoB,EAApBA,KAAMZ,EAAc,EAAdA,MACtC,OAAQY,GACN,IAAK,OACH,OAAOC,EAAQb,GAEjB,IAAK,QACH,OAAOe,EAASf,GAElB,IAAK,WACH,OAAOiB,EAAYjB,GAErB,QACE,SAYN,OACE,uBAAMoB,SATa,SAAAC,GACnBA,EAAMC,iBACNd,EAAW,CAAEI,KAAMA,EAAME,MAAOA,EAAOE,SAAUA,IACjDH,EAAQ,IACRE,EAAS,IACTE,EAAY,KAIkBM,UAAWC,IAAEC,KAA3C,UACE,yCACA,uBACEC,KAAK,OACLd,KAAK,OACLe,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,EACR7B,MAAOY,EACPkB,SAAUZ,EACVK,UAAWC,IAAEO,QAEf,2CACA,uBACEL,KAAK,QACLd,KAAK,QAGLiB,UAAQ,EACR7B,MAAOc,EACPgB,SAAUZ,EACVK,UAAWC,IAAEO,QAEf,6CACA,uBACEL,KAAK,WACLd,KAAK,WAELiB,UAAQ,EACR7B,MAAOgB,EACPc,SAAUZ,EACVK,UAAWC,IAAEO,QAEf,wBAAQL,KAAK,SAASH,UAAWC,IAAEQ,IAAnC","file":"static/js/5.4fff7219.chunk.js","sourcesContent":["import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"auth-style_form__ClNab\",\"btn\":\"auth-style_btn__1pGah\",\"input\":\"auth-style_input__1flCJ\"};","import { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { register } from '../../redux/auth/auth-operations';\r\nimport s from '../auth-style.module.css';\r\n\r\nfunction RegisterView({ onRegister }) {\r\n  const [name, setName] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n  const handleChange = ({ target: { name, value } }) => {\r\n    switch (name) {\r\n      case 'name':\r\n        return setName(value);\r\n\r\n      case 'email':\r\n        return setEmail(value);\r\n\r\n      case 'password':\r\n        return setPassword(value);\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n    onRegister({ name: name, email: email, password: password });\r\n    setName('');\r\n    setEmail('');\r\n    setPassword('');\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className={s.form}>\r\n      <label>Name</label>\r\n      <input\r\n        type=\"text\"\r\n        name=\"name\"\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n        value={name}\r\n        onChange={handleChange}\r\n        className={s.input}\r\n      />\r\n      <label>E-mail</label>\r\n      <input\r\n        type=\"email\"\r\n        name=\"email\"\r\n        // pattern=\".+@globex\\.com\"\r\n        // title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n        required\r\n        value={email}\r\n        onChange={handleChange}\r\n        className={s.input}\r\n      />\r\n      <label>Password</label>\r\n      <input\r\n        type=\"password\"\r\n        name=\"password\"\r\n        // title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n        required\r\n        value={password}\r\n        onChange={handleChange}\r\n        className={s.input}\r\n      />\r\n      <button type=\"submit\" className={s.btn}>\r\n        Register\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  onRegister: register,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(RegisterView);\r\n"],"sourceRoot":""}